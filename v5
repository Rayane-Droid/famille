#famille2.html
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <title>Vente de Biens</title>
  <!-- Lien vers le fichier CSS -->
  <link rel="stylesheet" href="famille.css">
  <!-- Lien vers le fichier JS -->
  <script src="dictionnaire.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-database.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
  <style>
  </style>
</head>

<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <title>Vente de Biens</title>
  <style>
  </style>
</head>
<body>
  <div id="language-selection">
    <h2 id="language-prompt">
      ðŸ‡²ðŸ‡¦ Ø§Ø®ØªØ± Ù„ØºØªÙƒ :<br />
      ðŸ‡«ðŸ‡· Choisissez votre langue :<br />
      ðŸ‡ºðŸ‡¸ Choose your language:<br />
      ðŸ‡ªðŸ‡¸ Elija su idioma:<br />
      ðŸ‡©ðŸ‡ª WÃ¤hlen Sie Ihre Sprache:<br />
      ðŸ‡®ðŸ‡¹ Scegli la tua lingua:
    </h2>
    <div class="language-menu">
      <select id="language" onchange="selectLanguage()">
        <option value="">--</option>
        <option value="fr">FranÃ§ais</option>
        <option value="ar">Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©</option>
        <option value="en">Anglais</option>
        <option value="es">Espagnol</option>
        <option value="de">Allemand</option>
        <option value="it">Italien</option>
      </select>
    </div>
  </div>

  <div id="user-form" class="hidden" aria-live="polite" aria-label="Formulaire utilisateur">
    <h2 id="welcome-message">Bienvenue !</h2>
    <div class="input-block">
      <label id="label-username" for="username">Nom d'utilisateur :</label>
      <input type="text" id="username" aria-required="true" />
    </div>
    <div class="input-block">
      <label id="label-phone" for="phone">NumÃ©ro de tÃ©lÃ©phone :</label>
      <input type="text" id="phone" aria-required="true" />
    </div>
    <button class="btn" id="btn-continue" onclick="submitUserInfo()">Continuer</button>
  </div>

  <div id="content" class="hidden" aria-live="polite" aria-label="Liste des biens disponibles">
    <button class="btn" onclick="resetApp()" id="btn-back">Retour au menu des langues</button>
    <h2 id="property-title">Nos biens disponibles :</h2>
    <table id="property-table" role="table" aria-describedby="property-title">
      <thead>
        <tr>
          <th scope="col">NÂ°</th>
          <th scope="col">Bien</th>
          <th scope="col">Titre</th>
          <th scope="col">Description</th>
          <th scope="col">Superficie</th>
          <th scope="col">Prix</th>
          <th scope="col">Photo</th>
          <th scope="col">VidÃ©o</th>
          <th scope="col">Valider</th>
          <th scope="col">Proposition</th>
          <th scope="col">Annuler</th>
        </tr>
      </thead>
      <tbody id="property-body"></tbody>
    </table>
    <br />
    <button class="btn" onclick="saveToPDF()" id="btn-save">Enregistrer en PDF</button>
  </div>
  <script>
    function selectLanguage() {
      const lang = document.getElementById("language").value;
      if (!lang) return;
      currentLanguage = lang;
      const t = translations[lang];

      // Met Ã  jour les Ã©lÃ©ments visibles et textes
      document.getElementById("language-selection").classList.add("hidden");
      document.getElementById("user-form").classList.remove("hidden");
      document.getElementById("welcome-message").innerText = t.welcome;
      document.getElementById("label-username").innerText = t.username;
      document.getElementById("label-phone").innerText = t.phone;
      document.getElementById("btn-continue").innerText = t.continue;
      document.getElementById("btn-back").innerText = t.back;
      document.getElementById("property-title").innerText = t.propertyTitle;
      document.getElementById("btn-save").innerText = t.save;

      // Met Ã  jour les en-tÃªtes du tableau
      const tableHeaders = document.querySelectorAll("#property-table th");
      t.tableHeaders.forEach((header, index) => {
        tableHeaders[index].innerText = header;
      });
    }

    function submitUserInfo() {
      const t = translations[currentLanguage];
      const username = document.getElementById("username").value.trim();
      const phone = document.getElementById("phone").value.trim();

      if (!username || !phone) {
        alert(t.fillAll);
        return;
      }
      const phoneRegex = /^\+?\d{8,15}$/;
      if (!phoneRegex.test(phone)) {
        alert(t.invalidPhone);
        return;
      }
      document.getElementById("user-form").classList.add("hidden");
      document.getElementById("content").classList.remove("hidden");
      generatePropertyTable();
    }

    function resetApp() {
      currentLanguage = "fr";
      document.getElementById("language-selection").classList.remove("hidden");
      document.getElementById("user-form").classList.add("hidden");
      document.getElementById("content").classList.add("hidden");
      document.getElementById("language").value = "";
      document.getElementById("username").value = "";
      document.getElementById("phone").value = "";
      document.getElementById("property-body").innerHTML = "";
    }

    function generatePropertyTable() {
      const t = translations[currentLanguage];
      const tbody = document.getElementById("property-body");
      tbody.innerHTML = "";
      properties.forEach((property, index) => {
        const row = document.createElement("tr");
        row.setAttribute("data-checked", "false");

        const title = property.titles[currentLanguage] || property.titles.fr;
        const description = property.descriptions[currentLanguage] || property.descriptions.fr;
        const area = property.areas[currentLanguage] || property.areas.fr;
        const price = property.prices[currentLanguage] || property.prices.fr;

        row.innerHTML = `
          <td>${index + 1}</td>
          <td>${title}</td>
          <td>${title}</td>
          <td>${description}</td>
          <td>${area}</td>
          <td>${price}</td>
          <td><a href="${property.photo}" target="_blank" rel="noopener">${t.photoText}</a></td>
          <td><a href="${property.video}" target="_blank" rel="noopener">${t.videoText}</a></td>
          <td class="validate-cell"></td>
          <td class="proposal-cell"></td>
          <td class="cancel-cell"></td>
        `;

        const validateBtn = document.createElement("button");
        validateBtn.innerText = t.validate;
        validateBtn.className = "btn";
        validateBtn.onclick = () => {
          row.querySelector(".validate-cell").innerText = row.cells[5].innerText;
          row.querySelector(".proposal-cell").innerHTML = "";
          row.querySelector(".cancel-cell").innerHTML = "";
          row.setAttribute("data-checked", "true");
        };

        const proposeBtn = document.createElement("button");
        proposeBtn.innerText = t.propose;
        proposeBtn.className = "btn";
        proposeBtn.onclick = () => {
          const input = document.createElement("input");
          input.type = "number";
          input.placeholder = t.propose + " un prix";
          input.style.width = "120px";

          const sendBtn = document.createElement("button");
          sendBtn.innerText = t.continue;
          sendBtn.className = "btn";
          sendBtn.onclick = () => {
            const value = input.value;
            if (!value || isNaN(value)) {
              alert(t.invalidPrice);
              return;
            }
            row.querySelector(".proposal-cell").innerText = value + " DH";
            row.querySelector(".validate-cell").innerHTML = "";
            row.querySelector(".cancel-cell").innerHTML = "";
            row.setAttribute("data-checked", "true");
          };

          const proposalCell = row.querySelector(".proposal-cell");
          proposalCell.innerHTML = "";
          proposalCell.appendChild(input);
          proposalCell.appendChild(sendBtn);
          row.querySelector(".validate-cell").innerHTML = "";
          row.querySelector(".cancel-cell").innerHTML = "";
        };

        const cancelBtn = document.createElement("button");
        cancelBtn.innerText = t.cancel;
        cancelBtn.className = "btn";
        cancelBtn.onclick = () => {
          row.querySelector(".cancel-cell").innerText = t.noDesire;
          row.querySelector(".validate-cell").innerHTML = "";
          row.querySelector(".proposal-cell").innerHTML = "";
          row.setAttribute("data-checked", "true");
        };

        row.querySelector(".validate-cell").appendChild(validateBtn);
        row.querySelector(".proposal-cell").appendChild(proposeBtn);
        row.querySelector(".cancel-cell").appendChild(cancelBtn);

        tbody.appendChild(row);
      });
    }
    
    function saveToPDF() {
  const t = translations[currentLanguage];
  const rows = document.querySelectorAll("#property-body tr");
  
  // VÃ©rifiez si toutes les lignes ont Ã©tÃ© validÃ©es
  for (let row of rows) {
    if (row.getAttribute("data-checked") !== "true") {
      alert(t.actionRequired);
      return;
    }
  }

  const nomUtilisateur = document.getElementById("username").value || t.nameLabel + " " + "Non renseignÃ©";
  const telephoneUtilisateur = document.getElementById("phone").value || t.phoneLabel + " " + "Non renseignÃ©";

  // Enregistrer les donnÃ©es dans Firebase
  const data = {
    nom: nomUtilisateur,
    telephone: telephoneUtilisateur,
    date: new Date().toISOString(),
    biens: []
  };

  rows.forEach((row) => {
    const cells = row.querySelectorAll("td");
    const bien = cells[1].innerText.trim();
    const prix = cells[5].innerText.trim();
    const choix = cells[8].innerText.trim() || cells[9].innerText.trim() || cells[10].innerText.trim();
    
    data.biens.push([bien, prix, choix]);
  });

  // Enregistrer les donnÃ©es dans la rÃ©fÃ©rence "historique_offres"
  database.ref("historique_offres").push(data)
    .then(() => {
      console.log("DonnÃ©es enregistrÃ©es avec succÃ¨s !");
      generatePDF(nomUtilisateur, telephoneUtilisateur, rows);
    })
    .catch((error) => {
      console.error("Erreur lors de l'enregistrement des donnÃ©es : ", error);
    });
}

function generatePDF(nomUtilisateur, telephoneUtilisateur, rows) {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();

  // Date actuelle formatÃ©e pour affichage selon langue
  const date = new Date();
  const localeForDate = currentLanguage === "ar" ? "ar-EG" : currentLanguage + '-' + currentLanguage.toUpperCase();
  const dateStr = date.toLocaleDateString(localeForDate, {
    year: "numeric",
    month: "long",
    day: "numeric"
  });

  // Date/heure pour nom fichier format YYYYMMDD_HHMMSS
  const pad = (n) => n.toString().padStart(2, "0");
  const filenameDate = `${date.getFullYear()}${pad(date.getMonth() + 1)}${pad(date.getDate())}_${pad(date.getHours())}${pad(date.getMinutes())}${pad(date.getSeconds())}`;
  const filename = `Offre_${filenameDate}.pdf`;

  // Titre
  doc.setFontSize(18);
  doc.setFont("helvetica", "bold");
  doc.text(t.summaryTitle, 105, 15, null, null, "center");

  // Infos utilisateur et date
  doc.setFontSize(11);
  doc.setFont("helvetica", "normal");
  doc.text(`${t.dateLabel} ${dateStr}`, 14, 30);
  doc.text(`${t.nameLabel} ${nomUtilisateur}`, 14, 38);
  doc.text(`${t.phoneLabel} ${telephoneUtilisateur}`, 14, 46);

  // PrÃ©parer les donnÃ©es du tableau
  const bodyData = [];
  rows.forEach((row) => {
    const cells = row.querySelectorAll("td");
    const bien = cells[1].innerText.trim();
    const titre = cells[2].innerText.trim();
    const description = cells[3].innerText.trim();
    const superficie = cells[4].innerText.trim();
    const prix = cells[5].innerText.trim();

    // Choix (valider, proposer, annuler)
    let choix = "";
    if (cells[8].innerText.trim()) choix = cells[8].innerText.trim();
    else if (cells[9].innerText.trim()) choix = cells[9].innerText.trim();
    else if (cells[10].innerText.trim()) choix = cells[10].innerText.trim();

    bodyData.push([bien, titre, description, superficie, prix, choix]);
  });

  // GÃ©nÃ©rer le tableau avec autoTable
  doc.autoTable({
    startY: 55,
    head: [[t.tableHeaders[1], t.tableHeaders[2], t.tableHeaders[3], t.tableHeaders[4], t.tableHeaders[5], "Choix"]],
    body: bodyData,
    styles: { font: "helvetica", fontSize: 10, cellPadding: 3 },
    headStyles: { fillColor: [41, 128, 185], textColor: 255, fontStyle: "bold" },
    alternateRowStyles: { fillColor: [240, 240, 240] },
    margin: { left: 14, right: 14 },
    columnStyles: {
      0: { cellWidth: 30 },
      1: { cellWidth: 30 },
      2: { cellWidth: 30 },
      3: { cellWidth: 25 },
      4: { cellWidth: 30 },
      5: { cellWidth: 30 },
    },
  });

  const lastY = doc.lastAutoTable ? doc.lastAutoTable.finalY + 10 : 100;

  // Texte procÃ©dure d'achat traduit
  const splitText = doc.splitTextToSize(t.purchaseProcedure, 180);

  doc.setFontSize(11);
  doc.setFont("helvetica", "italic");
  doc.text(t.purchaseProcedureTitle, 14, lastY - 3);
  doc.text(splitText, 14, lastY + 5);

  doc.save(filename);

  alert(`${t.pdfSaved} ${filename}`);
  resetApp();
}

    
    window.addEventListener("load", () => {
      document.getElementById("language-selection").classList.remove("hidden");
    });
  </script>

  <script>
    const firebaseConfig = {
      apiKey: "AIzaSyBw7Jl0JfEIrwEO-XeJdBBRLc...",
      authDomain: "botbd-d13b0.firebaseapp.com",
      databaseURL: "https://botbd-d13b0-default-rtdb.firebaseio.com",
      projectId: "botbd-d13b0",
      storageBucket: "botbd-d13b0.appspot.com",
      messagingSenderId: "313161565166",
      appId: "1:313161565166:web:a7a5a4e050f5afbcd8c4ff"
    };

    firebase.initializeApp(firebaseConfig);
    const database = firebase.database();

    const container = document.getElementById("historique-container");

    database.ref("historique_offres").on("value", snapshot => {
      container.innerHTML = "";

      const data = snapshot.val();
      if (!data) {
        container.innerHTML = "<p>Aucune offre enregistrÃ©e.</p>";
        return;
      }

      Object.values(data).forEach(offre => {
        const section = document.createElement("div");
        section.innerHTML = `
          <h3>${offre.nom} - ${offre.telephone}</h3>
          <p><strong>Date :</strong> ${offre.date}</p>
          <table>
            <thead>
              <tr><th>Bien</th><th>Prix</th><th>Choix</th></tr>
            </thead>
            <tbody>
              ${offre.biens.map(ligne =>
                `<tr><td>${ligne[0]}</td><td>${ligne[1]}</td><td>${ligne[2]}</td></tr>`
              ).join("")}
            </tbody>
          </table><hr>
        `;
        container.appendChild(section);
      });
    });
  </script>
</body>
</html>
